version = "3.7.14"

style = default
runner.dialect = "scala212"

project.excludeFilters = [
  ".idea/.*"
  "target/.*"
  "project/target/.*"
  "dist/.*"
  ".git/.*"
]

maxColumn = 100

indent {
  main = 2
  significant = 2
  callSite = 2
  defnSite = 4
  ctrlSite = 4
  caseSite = 5
  extendSite = 4
  withSiteRelativeToExtends = 0
  commaSiteRelativeToExtends = 8
}

indentOperator.topLevelOnly = false

align {
  preset = most
  tokens = [
    {code = "=>", owner = Case}
    {code = "%", owner = "Term.ApplyInfix"}
    {code = "%%", owner = "Term.ApplyInfix"}
    {code = ":=", owner = Infix}
    {code = "<-", owner = "Enumerator.Generator"}
    {code = "->", owner = "Term.ApplyInfix"}
    ":"
    "="
  ]
  arrowEnumeratorGenerator = false
  closeParenSite = false
  openParenCallSite = false
  openParenDefnSite = false
  openParenTupleSite = true
  multiline = true
}

newlines {
  topLevelStatementBlankLines = [
    { blanks { before = 0, after = 0, beforeEndMarker = 0, beforeAll = 0, afterAll = 1}, regex = "Import"}  //Insert break after imports
    { blanks { before = 1, after = 1, beforeEndMarker = 0, beforeAll = -1, afterAll = -1}, regex = "Defn\\.Def"} //Insert break before def but avoid when it's first or last statement
    { blanks { before = 1, after = 1, beforeEndMarker = 0, beforeAll = 0, afterAll = 0}, regex = "Defn\\.Object"} // Insert break after object definition
    { blanks { before = 1, after = 1, beforeEndMarker = 0, beforeAll = 0, afterAll = 0}, regex = "Defn\\.Class"} // Insert break after class definition
    { blanks { before = 0, after = 0, beforeEndMarker = 0, beforeAll = -1, afterAll = -1}, regex = "Defn\\.Val"} // Remove any break if it's for example first val in class
  ]
  beforeMultiline = fold
  alwaysBeforeElseAfterCurlyIf = false
  beforeCurlyLambdaParams = multilineWithCaseOnly
  afterCurlyLambdaParams = squash
  implicitParamListModifierPrefer = after
  avoidForSimpleOverflow = [tooLong, slc]
  avoidInResultType = true
  afterInfix = many
  selectChains = unfold
  sometimesBeforeColonInMethodReturnType = false
  forceBeforeMultilineAssign = any
}

danglingParentheses {
  defnSite = true
  callSite = true
  tupleSite = true
}

rewrite {
  rules = [RedundantBraces, RedundantParens, SortModifiers, PreferCurlyFors, Imports]
  redundantBraces {
    stringInterpolation = true
    generalExpressions = true
    ifElseExpressions = true
    methodBodies = true
    includeUnitMethods = true
    parensForOneLineApply = true
    maxLines = 20
  }
  sortModifiers.order = [
    "implicit", "lazy", "final", "sealed",
    "override", "private", "protected", "abstract"
  ]
  imports.expand = false
  imports.sort = scalastyle
  trailingCommas.style = never
}

verticalMultiline.newlineAfterOpenParen = true

docstrings {
  style = Asterisk
  removeEmpty = false
  oneline = fold
}

spaces {
  beforeContextBoundColon = Always
  afterKeywordBeforeParen = false
  inByNameTypes = true
  afterSymbolicDefs = false
}

literals {
  long = "Upper"
  float = "Upper"
  double = "Upper"
  hexPrefix = "Lower"
  hexDigits = "Upper"
  scientific = "Lower"
}

binPack {
  literalsExclude = [
    "Term.Name"
  ]
  literalArgumentLists = true
  parentConstructors = Never
}

includeNoParensInSelectChains = true

optIn {
  breakChainOnFirstMethodDot = false
  breaksInsideChains = false
  encloseClassicChains = false
}

importSelectors = "noBinPack"
assumeStandardLibraryStripMargin = false
